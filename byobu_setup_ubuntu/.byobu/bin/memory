#!/bin/sh -e
#
#    mem_available: grab the current memory and usage
#
#    Copyright (C) 2008 Canonical Ltd.
#    Copyright (C) 2011-2014 Dustin Kirkland
#
#    Authors: Dustin Kirkland <kirkland@byobu.org>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 3 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#   
#    Logic:
#       CPU usage is calculated using `top` command.
#       Memory usage is calculated using `/proc/meminfo` or `vm_stat` on MacOS.
#       The output is formatted to show CPU and RAM usage percentages.  
#
#    Params:
#      "$PCT": Percentage symbol to use in output

__memory_detail() {
	free
}

fpdiv2() {
  # $1 = numerator, $2 = denominator, $3 = number of decimal places (scale)
  local numerator=$1
  local denominator=$2
  local scale=${3:-2}  # default 2 decimal places if not specified
  _RET=$(echo "scale=$scale; $numerator / $denominator" | bc)
}

__memory() {
	local free="" total=""
	if [ -r /proc/meminfo ]; then
		while read tok val unit; do
			case "$tok" in
				MemTotal:) total=${val};;
				MemAvailable:) free=${val};;
			esac
			[ -n "${free}" -a -n "${total}" -a -n "${buffers}" -a -n "${cached}" ] && break;
		done < /proc/meminfo
	elif eval $BYOBU_TEST vm_stat >/dev/null 2>&1; then
		# MacOS support
		# calculation borrowed from http://apple.stackexchange.com/a/48195/18857
		free_blocks=$(vm_stat | grep free | awk '{ print $3 }' | sed -e 's/\.//')
		inactive_blocks=$(vm_stat | grep inactive | awk '{ print $3 }' | sed -e 's/\.//')
		speculative_blocks=$(vm_stat | grep speculative | awk '{ print $3 }' | sed -e 's/\.//')
		free=$((($free_blocks+speculative_blocks)*4))
		inactive=$(($inactive_blocks*4))
		total=$((($free+$inactive)))
	fi

  mem_used_real_kb=$(($total-$free))
  # "free output" buffers and cache (output from 'free')
  fpdiv2 $((100*${mem_used_real_kb})) "${total}" 0;
  usage=${_RET}
  unit="$ICON_GB"


	if [ $usage -gt 90 ]; then
		# Change foreground to yellow, if usage over 90%
		fg="Y"
	else
		fg="W"
	fi

	[ -n "$total" ] || return
    printf "CPU:"; printf "%3d" $(top -n 1 -b | awk '/^%Cpu/{print $2}'); printf "%s " "$PCT";
	printf "RAM:"; printf "%3d" "$usage"; printf "%s " "$PCT"; 
}

# vi: syntax=sh ts=4 noexpandtab
